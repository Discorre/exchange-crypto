{
	"info": {
		"_postman_id": "cd03b4c4-7d3a-41e6-a593-a14d3d0a04d8",
		"name": "exchange-crypto",
		"description": "# üõ†Ô∏è Exchange Crypto API Project\n\n## üìã **–û–ø–∏—Å–∞–Ω–∏–µ**\n\n–≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é API-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–º –æ–±–º–µ–Ω–æ–º. –í–∫–ª—é—á–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ CRUD-–æ–ø–µ—Ä–∞—Ü–∏–∏, –ø—Ä–∏–º–µ—Ä—ã —Ç–µ—Å—Ç–æ–≤, –∞ —Ç–∞–∫–∂–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤.\n\n## üöÄ **–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏**\n\n1. **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∑–∞–∫–∞–∑–æ–≤:**\n    \n    - **POST /user**: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n        \n    - **POST /order**: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ (–∫—É–ø–ª–∏/–ø—Ä–æ–¥–∞–∂–∏).\n        \n2. **–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:**\n    \n    - **GET /order**: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤.\n        \n    - **GET /balance**: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n        \n    - **GET /pair**: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä–∞—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.\n        \n3. **–£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:**\n    \n    - **DELETE /order**: –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ—Ä–¥–µ—Ä–∞.\n        \n\n## üìö **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å**\n\n1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å—ã (GET, POST, DELETE), —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É API.\n    \n2. –ò–∑–º–µ–Ω–∏—Ç–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (Body) –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n    \n3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —Ç–∞–∫–∏–µ –∫–∞–∫ `base_url` –∏ `id`, –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤.\n    \n4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª–∞–¥–∫—É **Tests**, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ JavaScript.\n    \n\n## üîß **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏**\n\n- –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ (—Å—Ç–∞—Ç—É—Å—ã 200, 201 –∏ –¥—Ä.).\n    \n- –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É–ø—Ä–æ—â–∞—é—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é –±–∞–∑–æ–≤–æ–≥–æ URL.\n    \n- –ü—Ä–∏–º–µ—Ä—ã DELETE –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –æ–±—ä–µ–∫—Ç–æ–≤.\n    \n\n## üí° **–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤**\n\n### **POST /order** (—Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞)\n\n``` json\n{\n  \"pair_id\": 1,\n  \"quantity\": 100,\n  \"price\": 10,\n  \"type\": \"sell\"\n}\n\n ```\n\n### **DELETE /order** (—É–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞)\n\n``` json\n{\n  \"order_id\": 9\n}\n\n ```\n\n---\n\n–ö–æ–ª–ª–µ–∫—Ü–∏—è API –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –±–∞–∑–æ–≤—ã—Ö RESTful –æ–ø–µ—Ä–∞—Ü–∏–π.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20480344"
	},
	"item": [
		{
			"name": "POST user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"johnDoe\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/user",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"user"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "ORDERS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-USER-KEY",
						"value": "834022ad-2652-44cf-87b7-eecbbc072dd0",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"pair_id\": 1,\n    \"quantity\": 100,\n    \"price\": 10,\n    \"type\": \"sell\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/order",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"order"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": [
				{
					"name": "POST seller",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-USER-KEY",
								"value": "8036fd4c01d416450d0c819c4370fb54",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"pair_id\": 16,\n    \"quantity\": 100,                                            \n    \"price\": 10,\n    \"type\": \"sell\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/order",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"order"
							]
						}
					},
					"_postman_previewlanguage": "Text",
					"header": [],
					"cookie": [],
					"body": ""
				},
				{
					"name": "POST buyer",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "X-USER-KEY",
								"value": "1956be07-63d3-4569-80f0-2d630fd0c02a",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"pair_id\": 3,\n    \"quantity\": 100,\n    \"price\": 10,\n    \"type\": \"sell\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/order",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"order"
							]
						}
					},
					"_postman_previewlanguage": "Text",
					"header": [],
					"cookie": [],
					"body": ""
				},
				{
					"name": "DELETE order",
					"originalRequest": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-USER-KEY",
								"value": "8036fd4c01d416450d0c819c4370fb54",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"order_id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/order",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"order"
							]
						}
					},
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Delete data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "X-USER-KEY",
						"value": "834022ad-2652-44cf-87b7-eecbbc072dd0",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"order_id\" : 9\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/order",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"order"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "GET balance",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-USER-KEY",
						"value": "e1af310f-9309-412f-9835-c7ada72e4589",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:8080/balance",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"balance"
					],
					"query": [
						{
							"key": "X-USER-KEY",
							"value": "834022ad-2652-44cf-87b7-eecbbc072dd0",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET orders",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/order",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET lots",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": ""
				}
			},
			"response": []
		},
		{
			"name": "GET pairs",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/pair",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"pair"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}